'use strict';class ApplyMask{static toCPF=(unformatedValue)=>{const extractedNumbers=this.numbersOnly(unformatedValue);return extractedNumbers.replace(/(\d{3})(\d)/,"$1.$2").replace(/(\d{3})(\d)/,"$1.$2").replace(/(\d{3})(\d{1,2})/,"$1-$2").replace(/(-\d{2})\d+?$/,"$1")};static toCNPJ=(unformatedValue)=>{const extractedNumbers=this.numbersOnly(unformatedValue);return extractedNumbers.replace(/(\d{2})(\d)/,"$1.$2").replace(/(\d{3})(\d)/,"$1.$2").replace(/(\d{3})(\d)/,"$1/$2").replace(/(\d{4})(\d{1,2})/,"$1-$2").replace(/(-\d{2})\d+?$/,"$1")};static toPhone=(unformatedValue)=>{const extractedNumbers=this.numbersOnly(unformatedValue);return extractedNumbers.replace(/(\d{2})(\d)/,"($1) $2").replace(/(\d{5})(\d{4})(\d)/,"$1-$2").replace(/(-\d{4})\d+?$/,"$1")};static toCEP=(unformatedValue)=>{const extractedNumbers=this.numbersOnly(unformatedValue);return extractedNumbers.replace(/(\d{5})(\d{3})/,"$1-$2").replace(/(-\d{3})\d+?$/,"$1")};static toDate=(unformatedValue)=>{const extractedNumbers=this.numbersOnly(unformatedValue);return extractedNumbers.replace(/(\d{2})(\d)/,"$1/$2").replace(/(\d{2})(\d)/,"$1/$2").replace(/(\d{4})(\d)/,"$1").replace(/(-\d{4})\d+?$/,"$1")};static charactersOnly=(unformatedValue)=>{return unformatedValue.replace(/[0-9]+/g,"")}
static nonSpecialCharactersOnly=(unformatedValue)=>{return unformatedValue.replace(/[0-9!@#Â¨$%^&*)(+=._-]+/g,"")};static numbersOnly=(unformatedValue)=>{return unformatedValue.replace(/\D/g,"")}}
class CustomMask{constructor(){const elementsToMask=Array.from(document.querySelectorAll("[data-custom-mask]"));elementsToMask.forEach((element)=>{const customMaskType=element.getAttribute("data-custom-mask");this.#maskingActions[customMaskType](element)})}
#maskingActions={"cpf":(element)=>this.applyMaskingEvents(element,ApplyMask.toCPF),"cnpj":(element)=>this.applyMaskingEvents(element,ApplyMask.toCNPJ),"phone":(element)=>this.applyMaskingEvents(element,ApplyMask.toPhone),"cep":(element)=>this.applyMaskingEvents(element,ApplyMask.toCEP),"date":(element)=>this.applyMaskingEvents(element,ApplyMask.toDate),"numbers":(element)=>this.applyMaskingEvents(element,ApplyMask.numbersOnly),"characters":(element)=>this.applyMaskingEvents(element,ApplyMask.charactersOnly),"non-special-characters":(element)=>this.applyMaskingEvents(element,ApplyMask.charactersOnly)};applyMaskingEvents(element,maskFunction){const setElementWithMask=()=>{const elementValue=element[elementStringContainer]
element[elementStringContainer]=maskFunction(elementValue)}
const setInputElementMask=(event)=>{const target=event.target
const startPosition=target.selectionStart+(event.key.length==1?1:0);setElementWithMask();target.selectionStart=startPosition;target.selectionEnd=startPosition}
const elementStringContainer=element.value!=undefined?"value":"textcontent";setElementWithMask(elementStringContainer);element.addEventListener("change",setElementWithMask);element.addEventListener("keydown",setElementWithMask);element.addEventListener("keyup",setInputElementMask)}}